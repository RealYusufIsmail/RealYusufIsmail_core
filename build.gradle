import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id "com.diffplug.spotless" version "6.10.0"
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'net.darkhax.curseforgegradle' version '1.1.24'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'maven-publish'
apply plugin: 'signing'

project.version = modVersion
project.group = 'io.github.realyusufismail'
base.archivesName.set('realyusufismailcore')
description = "RealYusuf Ismail's Core. The main library for all my Minecraft mod."

final var mcVersion = mcVersion
final var projectId = projectId

ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'ysufgamer222@gmail.com'
    dev_organization = 'Real Yusuf Ismail'
    dev_organizationUrl = 'https://github.com/RealYusufIsmail/RealYusufIsmail-Core'

    gpl_name = 'Apache License 2.0'
    gpl_url = 'https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core/blob/main/LICENSE'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            args '--mod', 'realyusufismailcore', '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/')



            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }
    }
}
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title": "realyusufismailcore",
                "Specification-Vendor": "Yusuf.I",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Yusuf.I",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}



jar.finalizedBy('reobfJar')

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

afterEvaluate { project ->
    ext.isReleaseVersion = !version.endsWith("RELEASE")
}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        palantirJavaFormat()
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
        licenseHeader(
                """/*
 * Copyright 2024 RealYusufIsmail.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ """)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId = project.artifactId // or maybe archiveBaseName?
            from components.java
            pom {
                name = project.archivesBaseName
                description = project.description
                url = "https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core/"
                packaging = "jar"

                licenses {
                    license {
                        name = "${gpl_name}"
                        url = "${gpl_url}"
                    }
                }
                developers {
                    developer {
                        id = "${dev_id}"
                        name = "${dev_name}"
                        email = "${dev_email}"
                        organization = "${dev_organization}"
                        organizationUrl = "${dev_organizationUrl}"
                    }
                }
                scm {
                    connection = 'https://github.com/RealYusufIsmail/YDW.git'
                    developerConnection = 'scm:git:ssh://git@github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core.git'
                    url = 'https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core/'
                }
            }
        }
    }
    repositories {
        maven {
            afterEvaluate { project ->
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                //println "repos: " + version
                //println "repos: " + isReleaseVersion
                //println url

                credentials {
                    username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                    password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
                }
            }
        }
    }
}

signing {
    afterEvaluate { project ->
        //println "sign: " + version
        //println "sign: " + isReleaseVersion
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}

nexusStaging {
    packageGroup = 'io.github.realyusufismail'
    serverUrl = "https://s01.oss.sonatype.org/service/local"
    username = project.hasProperty('MAVEN_USERNAME') ? project.property('MAVEN_USERNAME') : 'username'
    password = project.hasProperty('MAVEN_PASSWORD') ? project.property('MAVEN_PASSWORD') : 'password'
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "CurseForge"
    dependsOn("build")
    disableVersionDetection()

    var token = project.hasProperty('curseforge.token') ? project.property('curseforge.token') as String : ""
    apiToken = token

    final var jar = file("build/libs/${base.archivesName.get()}-${project.version}.jar")

    final var mainFile = upload(projectId, jar)
    mainFile.changelog = file("CHANGELOG.md").getText()
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 8")
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(mcVersion)
}